# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: crub.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='crub.proto',
  package='crubrpc',
  syntax='proto3',
  serialized_pb=_b('\n\ncrub.proto\x12\x07\x63rubrpc\"8\n\x08Location\x12\r\n\x05label\x18\x01 \x01(\t\x12\x1d\n\x05point\x18\x02 \x01(\x0b\x32\x0e.crubrpc.Point\"\xa3\x01\n\x03Run\x12#\n\x08location\x18\x01 \x01(\x0b\x32\x11.crubrpc.Location\x12!\n\ncreated_at\x18\x02 \x01(\x0b\x32\r.crubrpc.Date\x12!\n\nupdated_at\x18\x03 \x01(\x0b\x32\r.crubrpc.Date\x12\x1f\n\x08\x64\x61tetime\x18\x04 \x01(\x0b\x32\r.crubrpc.Date\x12\x10\n\x08\x65vent_id\x18\x05 \x01(\t\"\x14\n\x04\x44\x61te\x12\x0c\n\x04\x64\x61te\x18\x01 \x01(\t\"9\n\x05Point\x12\x10\n\x08latitude\x18\x01 \x01(\x02\x12\x11\n\tlongitude\x18\x02 \x01(\x02\x12\x0b\n\x03\x66oo\x18\x03 \x01(\t2\xce\x01\n\x04\x43rub\x12\x32\n\x0bGetLocation\x12\x0e.crubrpc.Point\x1a\x11.crubrpc.Location\"\x00\x12-\n\x0cGetLatestRun\x12\r.crubrpc.Date\x1a\x0c.crubrpc.Run\"\x00\x12\x36\n\rListLocations\x12\x0e.crubrpc.Point\x1a\x11.crubrpc.Location\"\x00\x30\x01\x12+\n\x08ListRuns\x12\r.crubrpc.Date\x1a\x0c.crubrpc.Run\"\x00\x30\x01\x42\x33\n\x1c\x63om.fuzzproductions.crubclubB\x0b\x43rubClubRPCP\x01\xa2\x02\x03RTGb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_LOCATION = _descriptor.Descriptor(
  name='Location',
  full_name='crubrpc.Location',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='label', full_name='crubrpc.Location.label', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='point', full_name='crubrpc.Location.point', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=23,
  serialized_end=79,
)


_RUN = _descriptor.Descriptor(
  name='Run',
  full_name='crubrpc.Run',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='location', full_name='crubrpc.Run.location', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='created_at', full_name='crubrpc.Run.created_at', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='updated_at', full_name='crubrpc.Run.updated_at', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='datetime', full_name='crubrpc.Run.datetime', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='event_id', full_name='crubrpc.Run.event_id', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=82,
  serialized_end=245,
)


_DATE = _descriptor.Descriptor(
  name='Date',
  full_name='crubrpc.Date',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='date', full_name='crubrpc.Date.date', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=247,
  serialized_end=267,
)


_POINT = _descriptor.Descriptor(
  name='Point',
  full_name='crubrpc.Point',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='latitude', full_name='crubrpc.Point.latitude', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='longitude', full_name='crubrpc.Point.longitude', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='foo', full_name='crubrpc.Point.foo', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=269,
  serialized_end=326,
)

_LOCATION.fields_by_name['point'].message_type = _POINT
_RUN.fields_by_name['location'].message_type = _LOCATION
_RUN.fields_by_name['created_at'].message_type = _DATE
_RUN.fields_by_name['updated_at'].message_type = _DATE
_RUN.fields_by_name['datetime'].message_type = _DATE
DESCRIPTOR.message_types_by_name['Location'] = _LOCATION
DESCRIPTOR.message_types_by_name['Run'] = _RUN
DESCRIPTOR.message_types_by_name['Date'] = _DATE
DESCRIPTOR.message_types_by_name['Point'] = _POINT

Location = _reflection.GeneratedProtocolMessageType('Location', (_message.Message,), dict(
  DESCRIPTOR = _LOCATION,
  __module__ = 'crub_pb2'
  # @@protoc_insertion_point(class_scope:crubrpc.Location)
  ))
_sym_db.RegisterMessage(Location)

Run = _reflection.GeneratedProtocolMessageType('Run', (_message.Message,), dict(
  DESCRIPTOR = _RUN,
  __module__ = 'crub_pb2'
  # @@protoc_insertion_point(class_scope:crubrpc.Run)
  ))
_sym_db.RegisterMessage(Run)

Date = _reflection.GeneratedProtocolMessageType('Date', (_message.Message,), dict(
  DESCRIPTOR = _DATE,
  __module__ = 'crub_pb2'
  # @@protoc_insertion_point(class_scope:crubrpc.Date)
  ))
_sym_db.RegisterMessage(Date)

Point = _reflection.GeneratedProtocolMessageType('Point', (_message.Message,), dict(
  DESCRIPTOR = _POINT,
  __module__ = 'crub_pb2'
  # @@protoc_insertion_point(class_scope:crubrpc.Point)
  ))
_sym_db.RegisterMessage(Point)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\034com.fuzzproductions.crubclubB\013CrubClubRPCP\001\242\002\003RTG'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class CrubStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLocation = channel.unary_unary(
        '/crubrpc.Crub/GetLocation',
        request_serializer=Point.SerializeToString,
        response_deserializer=Location.FromString,
        )
    self.GetLatestRun = channel.unary_unary(
        '/crubrpc.Crub/GetLatestRun',
        request_serializer=Date.SerializeToString,
        response_deserializer=Run.FromString,
        )
    self.ListLocations = channel.unary_stream(
        '/crubrpc.Crub/ListLocations',
        request_serializer=Point.SerializeToString,
        response_deserializer=Location.FromString,
        )
    self.ListRuns = channel.unary_stream(
        '/crubrpc.Crub/ListRuns',
        request_serializer=Date.SerializeToString,
        response_deserializer=Run.FromString,
        )


class CrubServicer(object):
  """Interface exported by the server.
  """

  def GetLocation(self, request, context):
    """A simple RPC.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLatestRun(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListLocations(self, request, context):
    """A server-to-client streaming RPC.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListRuns(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CrubServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLocation': grpc.unary_unary_rpc_method_handler(
          servicer.GetLocation,
          request_deserializer=Point.FromString,
          response_serializer=Location.SerializeToString,
      ),
      'GetLatestRun': grpc.unary_unary_rpc_method_handler(
          servicer.GetLatestRun,
          request_deserializer=Date.FromString,
          response_serializer=Run.SerializeToString,
      ),
      'ListLocations': grpc.unary_stream_rpc_method_handler(
          servicer.ListLocations,
          request_deserializer=Point.FromString,
          response_serializer=Location.SerializeToString,
      ),
      'ListRuns': grpc.unary_stream_rpc_method_handler(
          servicer.ListRuns,
          request_deserializer=Date.FromString,
          response_serializer=Run.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'crubrpc.Crub', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaCrubServicer(object):
  """Interface exported by the server.
  """
  def GetLocation(self, request, context):
    """A simple RPC.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetLatestRun(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def ListLocations(self, request, context):
    """A server-to-client streaming RPC.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def ListRuns(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaCrubStub(object):
  """Interface exported by the server.
  """
  def GetLocation(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """A simple RPC.
    """
    raise NotImplementedError()
  GetLocation.future = None
  def GetLatestRun(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetLatestRun.future = None
  def ListLocations(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """A server-to-client streaming RPC.
    """
    raise NotImplementedError()
  def ListRuns(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()


def beta_create_Crub_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('crubrpc.Crub', 'GetLatestRun'): Date.FromString,
    ('crubrpc.Crub', 'GetLocation'): Point.FromString,
    ('crubrpc.Crub', 'ListLocations'): Point.FromString,
    ('crubrpc.Crub', 'ListRuns'): Date.FromString,
  }
  response_serializers = {
    ('crubrpc.Crub', 'GetLatestRun'): Run.SerializeToString,
    ('crubrpc.Crub', 'GetLocation'): Location.SerializeToString,
    ('crubrpc.Crub', 'ListLocations'): Location.SerializeToString,
    ('crubrpc.Crub', 'ListRuns'): Run.SerializeToString,
  }
  method_implementations = {
    ('crubrpc.Crub', 'GetLatestRun'): face_utilities.unary_unary_inline(servicer.GetLatestRun),
    ('crubrpc.Crub', 'GetLocation'): face_utilities.unary_unary_inline(servicer.GetLocation),
    ('crubrpc.Crub', 'ListLocations'): face_utilities.unary_stream_inline(servicer.ListLocations),
    ('crubrpc.Crub', 'ListRuns'): face_utilities.unary_stream_inline(servicer.ListRuns),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Crub_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('crubrpc.Crub', 'GetLatestRun'): Date.SerializeToString,
    ('crubrpc.Crub', 'GetLocation'): Point.SerializeToString,
    ('crubrpc.Crub', 'ListLocations'): Point.SerializeToString,
    ('crubrpc.Crub', 'ListRuns'): Date.SerializeToString,
  }
  response_deserializers = {
    ('crubrpc.Crub', 'GetLatestRun'): Run.FromString,
    ('crubrpc.Crub', 'GetLocation'): Location.FromString,
    ('crubrpc.Crub', 'ListLocations'): Location.FromString,
    ('crubrpc.Crub', 'ListRuns'): Run.FromString,
  }
  cardinalities = {
    'GetLatestRun': cardinality.Cardinality.UNARY_UNARY,
    'GetLocation': cardinality.Cardinality.UNARY_UNARY,
    'ListLocations': cardinality.Cardinality.UNARY_STREAM,
    'ListRuns': cardinality.Cardinality.UNARY_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'crubrpc.Crub', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
